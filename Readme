# Hifiplayer: Reproductor de Música de Alta Fidelidad

## 1. Descripción General

**Hifiplayer** es una aplicación de reproductor de música de alta fidelidad desarrollada en Go que se ejecuta en la consola. El sistema está diseñado para escanear directorios locales en busca de archivos de música (`.mp3`, `.flac`), extraer sus metadatos (artista, álbum, título), almacenarlos en una base de datos MySQL y permitir a los usuarios registrarse, iniciar sesión y reproducir su colección de música a través de una interfaz de menús interactiva.

El proyecto demuestra una clara segmentación de responsabilidades, separando la lógica de la interfaz de usuario (main.go), el manejo de la base de datos (db.go) y el control de la reproducción de audio (music.go).

---

## 2. Características Principales

- **Gestión de Usuarios**: Sistema completo de registro e inicio de sesión. Las contraseñas se almacenan de forma segura utilizando `bcrypt`.
- **Escaneo de Biblioteca de Música**: Escanea recursivamente un directorio especificado para encontrar archivos de música.
- **Extracción de Metadatos**: Utiliza la librería `github.com/dhowden/tag` para leer los metadatos de los archivos de audio.
- **Persistencia de Datos**: Toda la información de usuarios y metadatos de las canciones se guarda en una base de datos MySQL, lo que garantiza la persistencia entre sesiones.
- **Navegación por Biblioteca**: Permite a los usuarios explorar su música navegando por artistas y luego por álbumes.
- **Reproducción de Audio**: Utiliza la librería `github.com/faiface/beep` para la decodificación y reproducción de audio.
- **Controles de Reproducción Completos**:
    - Play / Pausa
    - Adelantar / Retroceder 10 segundos
    - Siguiente / Anterior canción (dentro del mismo álbum)
    - Ajuste de volumen
    - Detener reproducción

---

## 3. Estructura del Proyecto

El proyecto está organizado en varios archivos, cada uno con una responsabilidad específica:

- **`main.go`**: Es el punto de entrada de la aplicación. Contiene la lógica principal del programa, la gestión de los menús de la interfaz de usuario en la consola y el flujo de navegación.
- **`music.go`**: Contiene toda la lógica relacionada con la música. Es responsable de escanear el directorio, decodificar archivos y controlar la reproducción a través de la librería `beep`.
- **`db.go`**: Gestiona todas las interacciones con la base de datos MySQL. Define las estructuras de datos y los métodos para registrar usuarios, verificar credenciales, y añadir o consultar datos de la música.
- **`hify_player.sql`**: Script SQL para crear la base de datos y las tablas necesarias (`usuarios`, `musicas`) con sus respectivos índices.
- **`users_passwords.go`**: (Archivo actualmente sin uso en la lógica principal) Probablemente fue una implementación inicial para manejar usuarios en memoria antes de migrar a una base de datos.

---

## 4. Segmentación del Código y Funciones Clave

### `main.go` - Interfaz y Flujo Principal

- **`main()`**: Inicializa la conexión con la base de datos, inicia el escaneo del directorio de música y presenta el menú principal de bienvenida (Ingresar, Registrarse, Salir).
- **`ingresar()` / `registrar()`**: Gestionan la entrada de datos del usuario para el inicio de sesión y el registro, respectivamente. Invocan a los métodos correspondientes en `db.go`.
- **`menuUsuario()`**: Una vez que el usuario ha ingresado, este menú le permite elegir entre explorar la música o cerrar la sesión.
- **`explorarMusica()`**: Guía al usuario a través de un proceso de 3 pasos:
    1.  Muestra la lista de artistas.
    2.  Tras seleccionar un artista, muestra sus álbumes.
    3.  Tras seleccionar un álbum, muestra las canciones y permite elegir una para reproducir.
- **`playerMenu()`**: Un sub-menú que se activa cuando una canción está en reproducción, mostrando todos los controles de audio disponibles.

### `music.go` - Lógica de Audio

- **`ScanMusicDirectory()`**: Recorre el directorio de música de forma recursiva. Para cada archivo `.mp3` o `.flac`, abre el archivo, intenta leer los metadatos y calcula la duración. Devuelve una lista de `MusicFile`.
- **`PlayMusicFile()`**: Recibe la ruta de un archivo, lo abre y lo decodifica usando `mp3.Decode` o `flac.Decode`. Inicializa el `speaker` de la librería `beep` y comienza la reproducción.
- **`TogglePlayPause()` / `StopMusic()` / `SeekMusic()`**: Funciones que interactúan con el `*beep.Ctrl` para controlar el estado de la reproducción.
- **`SetVolume()`**: Ajusta el volumen de forma logarítmica para una percepción más natural, utilizando la estructura `effects.Volume`.

### `db.go` - Lógica de Base de Datos

- **`NewDB()`**: Establece y verifica la conexión con la base de datos MySQL.
- **`Init()`**: Asegura que las tablas `usuarios` y `musicas` existan en la base de datos, creándolas si es necesario.
- **`AddUser()`**: Hashea la contraseña del usuario con `bcrypt` y la inserta en la tabla `usuarios`.
- **`VerifyUser()`**: Compara la clave proporcionada con el hash almacenado en la base de datos usando `bcrypt.CompareHashAndPassword`.
- **`AddOrUpdateMusic()`**: Inserta o actualiza los metadatos de una canción para evitar duplicados, usando la ruta del archivo como identificador único.
- **`GetArtists()` / `GetAlbumsByArtist()` / `GetSongsByArtistAndAlbum()`**: Consultas `SELECT DISTINCT` que permiten la navegación jerárquica por la biblioteca de música.

---

## 5. Gestión de Errores

La gestión de errores en la aplicación es robusta y se centra en evitar que el programa se cierre inesperadamente. La estrategia general es:

1.  **Verificación Inmediata**: Cada vez que se llama a una función que puede devolver un error (operaciones de archivo, consultas a la base de datos, conversión de tipos), el error se comprueba inmediatamente con `if err != nil`.
2.  **Información al Usuario**: Cuando se captura un error, se imprime un mensaje descriptivo en la consola (e.g., "Error conectando a la base de datos:", "Usuario o clave incorrectos").
3.  **Continuidad Controlada**: En lugar de entrar en pánico y cerrar la aplicación, el programa generalmente regresa al menú anterior, permitiendo al usuario reintentar la acción o elegir una opción diferente. Por ejemplo, si se introduce un número de canción inválido, se notifica y se vuelve a mostrar la lista.

### Posibles Errores y Cómo se Gestionan

- **Conexión a la base de datos fallida**: El programa no se inicia y muestra un mensaje claro.
- **Directorio de música no encontrado**: El escaneo falla, se notifica el error, pero la aplicación continúa, permitiendo el inicio de sesión (aunque sin música para reproducir).
- **Archivo de música corrupto**: La decodificación puede fallar. Se notifica el "Error al reproducir canción" y se regresa al menú de selección.
- **Entrada de usuario no válida (letras en lugar de números)**: El uso de `strconv.Atoi` captura el error, se muestra un mensaje de "Selección inválida" y se vuelve a solicitar la entrada.

---

## 6. Implementación Futura (Interfaz Web)

Esta aplicación de consola tiene una base sólida y bien segmentada que facilita su expansión a una aplicación web completa.

### Backend (API REST)

Se puede crear una API REST en Go utilizando la lógica de `db.go` y `music.go`. Un framework como **Gin** o **Fiber** sería ideal.

-   **Endpoints de Autenticación**:
    -   `POST /api/register`: Para registrar nuevos usuarios.
    -   `POST /api/login`: Para iniciar sesión y obtener un token (JWT).
-   **Endpoints de Música**:
    -   `GET /api/artists`: Devuelve una lista de todos los artistas.
    -   `GET /api/artists/:artistId/albums`: Devuelve los álbumes de un artista específico.
    -   `GET /api/albums/:albumId/songs`: Devuelve las canciones de un álbum.
-   **Endpoints de Reproducción (Streaming)**:
    -   `GET /api/stream/:songId`: Este endpoint haría streaming del archivo de audio al cliente. Se necesitaría un middleware de autenticación para proteger el acceso.

### Frontend

Se podría construir una interfaz de usuario moderna con frameworks como **React**, **Vue** o **Svelte**.

-   La interfaz mostraría las vistas de login/registro, el explorador de artistas/álbumes y un reproductor de audio persistente en la parte inferior de la página.
-   Utilizaría `fetch` o `axios` para comunicarse con la API REST del backend.
-   El reproductor de audio web (`<audio>`) obtendría el audio del endpoint de streaming (`/api/stream/:songId`).

### Tiempo Real (WebSockets)

Para una experiencia más avanzada, se podrían usar **WebSockets** para sincronizar el estado de reproducción entre múltiples dispositivos o para notificaciones en tiempo real.

---

## 7. Cómo Compilar y Ejecutar

1.  **Configurar la Base de Datos**: Ejecute el script `hify_player.sql` en su servidor MySQL para crear la base de datos `hify_player` y sus tablas.
2.  **Instalar Go**: Asegúrese de tener Go (versión 1.18 o superior) instalado en su sistema.
3.  **Instalar Dependencias**: Navegue al directorio del proyecto en su terminal y ejecute `go mod tidy`. Esto descargará e instalará todas las librerías necesarias (`mysql-driver`, `bcrypt`, `beep`, `tag`).
4.  **Configurar Ruta de Música**: En el archivo `main.go`, modifique la ruta en la línea `ScanMusicDirectory("C:\\...")` para que apunte a su directorio de música local.
5.  **Ejecutar la Aplicación**: Corra el programa desde la terminal con el comando:
    ```bash
    go run .
    ```
    O si prefiere compilar un ejecutable:
    ```bash
    go build -o hifiplayer.exe
    ./hifiplayer.exe
    ```
